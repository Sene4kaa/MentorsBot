import gspread
import psycopg

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from django.conf import settings

from bot.services.keyboards import (
    get_user_added_practice_kb,
    get_back_to_user_menu_kb,
    get_user_list_cancel_sign_up,
    get_user_list_cancel_sign_up_practice_kb,
)
from bot.services.messages import (
    get_lessons_lower_35_list,
    get_lessons_format_list,
    get_deleting_lessons_list,
    get_lessons_dates_lower_35_list
)

DATABASE_URL = settings.DATABASE_URL


class SignUp(StatesGroup):
    signing_up_starting = State()
    choosing_practice = State()
    choosing_time = State()
    signing_up = State()


def next_available_row(worksheet):
    str_list = list(filter(None, worksheet.col_values(1)))
    return str(len(str_list) + 1)


router = Router()

available_practice_formats = ["Zoom", "–û—á–Ω–æ, –ö—Ä–æ–Ω–≤–µ—Ä–∫—Å–∫–∏–π", "–û—á–Ω–æ, –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞"]


@router.callback_query(StateFilter(None), F.data == "SignUpForPractice")
async def start_signing_up(callback: CallbackQuery, state: FSMContext):

    lessons_list = get_lessons_lower_35_list(callback.from_user.id)
    if len(lessons_list) > 0:
        await callback.message.edit_text(
            text="–ö–∞–∫–æ–µ <i>–∑–∞–Ω—è—Ç–∏–µ</i> —Ç–µ–±–µ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –ø–æ—Å–µ—Ç–∏—Ç—å?",
            reply_markup=get_user_list_cancel_sign_up(set(lessons_list)),
        )

        await state.set_state(SignUp.choosing_practice)
    else:
        await callback.message.edit_text(
            text="üò™ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤", reply_markup=get_back_to_user_menu_kb()
        )

        await state.clear()


@router.callback_query(F.data == "CancelToChoosingPracticeOperation")
async def start_signing_up(callback: CallbackQuery, state: FSMContext):

    lessons_list = get_lessons_lower_35_list(callback.from_user.id)
    if len(lessons_list) > 0:
        await callback.message.edit_text(
            text="–ö–∞–∫–æ–µ <i>–∑–∞–Ω—è—Ç–∏–µ</i> —Ç–µ–±–µ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –ø–æ—Å–µ—Ç–∏—Ç—å?",
            reply_markup=get_user_list_cancel_sign_up(set(lessons_list)),
        )

        await state.set_state(SignUp.choosing_practice)
    else:
        await callback.message.edit_text(
            text="üò™ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤", reply_markup=get_back_to_user_menu_kb()
        )

        await state.clear()


@router.callback_query(F.data == "CancelToChoosingDatetimeOperation")
async def time_chosen(callback: CallbackQuery, state: FSMContext):

    user_data = await state.get_data()

    await callback.message.edit_text(
        text=f"–¢—ã –≤—ã–±—Ä–∞–ª(–∞) –∑–∞–Ω—è—Ç–∏–µ: <b>{user_data['chosen_practice']}</b>\n\n"
        + f"‚ùóÔ∏è –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ ‚ùóÔ∏è\n–§–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏—è: <b>{user_data['chosen_format']}</b>"
        + "\n\n–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–µ <i>–¥–∞—Ç—É –∏ –≤—Ä–µ–º—è</i> –∑–∞–Ω—è—Ç–∏—è",
        reply_markup=get_user_list_cancel_sign_up_practice_kb(
            set(get_lessons_dates_lower_35_list(user_data["chosen_practice"]))
        ),
    )

    await state.set_state(SignUp.choosing_time)


@router.callback_query(SignUp.choosing_practice)
async def practice_chosen(callback: CallbackQuery, state: FSMContext):

    practice_format = get_lessons_format_list(callback.data)[0]

    await state.update_data(chosen_practice=callback.data)
    await state.update_data(chosen_format=practice_format)
    user_data = await state.get_data()

    if user_data['chosen_format'] == "Zoom":
        await callback.message.edit_text(
            text=(
                f"–¢—ã –≤—ã–±—Ä–∞–ª(–∞) –∑–∞–Ω—è—Ç–∏–µ: <b>{user_data['chosen_practice']}</b>\n"
                + f"‚ùóÔ∏è –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ ‚ùóÔ∏è\n–§–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏—è: <b>{user_data['chosen_format']}</b>\n"
                + f"<u>–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏–µ –±—ã–ª–æ –∑–∞—Å—á–∏—Ç–∞–Ω–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –≤–µ–±-–∫–∞–º–µ—Ä—ã</u>"
                + "\n\n–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–µ <i>–¥–∞—Ç—É –∏ –≤—Ä–µ–º—è</i> –∑–∞–Ω—è—Ç–∏—è"
            ),
            reply_markup=get_user_list_cancel_sign_up_practice_kb(
                set(get_lessons_dates_lower_35_list(user_data["chosen_practice"]))
            ),
        )
    else:
        await callback.message.edit_text(
            text=(
                    f"–¢—ã –≤—ã–±—Ä–∞–ª(–∞) –∑–∞–Ω—è—Ç–∏–µ: <b>{user_data['chosen_practice']}</b>\n"
                    + f"‚ùóÔ∏è –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ ‚ùóÔ∏è\n–§–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏—è: <b>{user_data['chosen_format']}</b>\n\n"
                    + "–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–µ <i>–¥–∞—Ç—É –∏ –≤—Ä–µ–º—è</i> –∑–∞–Ω—è—Ç–∏—è"
            ),
            reply_markup=get_user_list_cancel_sign_up_practice_kb(
                set(get_lessons_dates_lower_35_list(user_data["chosen_practice"]))
            ),
        )
    await state.set_state(SignUp.choosing_time)


@router.callback_query(SignUp.choosing_time)
async def time_chosen(callback: CallbackQuery, state: FSMContext):

    await state.update_data(chosen_time=callback.data)
    user_data = await state.get_data()

    await callback.message.edit_text(
        text=f"–¢—ã —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ\n\nüß† –ü—Ä–µ–¥–º–µ—Ç: <b>{user_data['chosen_practice']}</b>\nüéØ –§–æ—Ä–º–∞—Ç: <b>{user_data['chosen_format']}</b>"
        + f"\nüìÜ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: <b>{user_data['chosen_time']}</b>.\n\n<u>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∑–∞–ø–∏—Å—å</u>.",
        reply_markup=get_user_added_practice_kb(),
    )

    await state.set_state(SignUp.signing_up)


@router.callback_query(SignUp.signing_up)
async def ending_adding_practice(callback: CallbackQuery, state: FSMContext):

    user_data = await state.get_data()
    sql_practices = """INSERT INTO practices (user_id, lessons, format, date, hours, minutes)
             VALUES (%s, %s, %s, %s, %s, %s)"""
    sql_schedule = """UPDATE schedule 
            SET users_number = users_number + 1 
            WHERE lesson=%s AND format=%s AND date=%s AND hours=%s AND minutes=%s"""

    with psycopg.connect(DATABASE_URL) as conn:
        with conn.cursor() as cursor:
            cursor.execute(
                sql_practices,
                [
                    callback.from_user.id,
                    user_data["chosen_practice"],
                    user_data["chosen_format"],
                    user_data["chosen_time"].split(", ")[0] + ", " + user_data["chosen_time"].split(", ")[1],
                    user_data["chosen_time"].split(", ")[2][:2],
                    user_data["chosen_time"].split(", ")[2][3:],
                ],
            )
            cursor.execute(
                sql_schedule,
                [
                    user_data["chosen_practice"],
                    user_data["chosen_format"],
                    user_data["chosen_time"].split(", ")[0] + ", " + user_data["chosen_time"].split(", ")[1],
                    user_data["chosen_time"].split(", ")[2][:2],
                    user_data["chosen_time"].split(", ")[2][3:],
                ],
            )

            user_name = cursor.execute(
                "SELECT surname, name FROM users WHERE user_id=%s", [callback.from_user.id]
            ).fetchall()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü—É
    gc = gspread.service_account(filename="test.json")
    sh = gc.open_by_key(settings.SAMPLE_SPREADSHEET_ID)
    worksheet_sign_up = sh.worksheet("SignUpPractices")

    next_row_id = str(int(next_available_row(worksheet_sign_up)) + 1)
    worksheet_sign_up.update_acell(f"A{next_row_id}", user_data["chosen_practice"])
    worksheet_sign_up.update_acell(f"B{next_row_id}", user_name[0][0])
    worksheet_sign_up.update_acell(f"C{next_row_id}", user_name[0][1])
    worksheet_sign_up.update_acell(
        f"D{next_row_id}", user_data["chosen_time"].split(", ")[0] + ", " + user_data["chosen_time"].split(", ")[1])
    worksheet_sign_up.update_acell(f"E{next_row_id}", user_data["chosen_time"].split(", ")[2])


    await callback.message.edit_text(
            text=(
                "–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ <b>–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>!\n"
                + "–°—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ <i>–ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è</i>"
            ),
            reply_markup=get_back_to_user_menu_kb(),
        )
    await state.clear()
